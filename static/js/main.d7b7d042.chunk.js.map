{"version":3,"sources":["logo.svg","hook/Validator.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Validator","props","useState","passWord","setPassword","email","setEmail","number","setNumber","useEffect","console","log","autoComplete","TextField","error","length","id","onChange","event","txt","target","value","label","variant","test","Button","color","disabled","onClick","text","getText","handleApi","App","style","marginTop","marginLeft","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,8KCG5B,SAASC,EAAUC,GAAO,MAULC,mBAAS,IAVJ,mBAU9BC,EAV8B,KAUpBC,EAVoB,OAWXF,mBAAS,IAXE,mBAW9BG,EAX8B,KAWvBC,EAXuB,OAYTJ,mBAAS,IAZA,mBAY9BK,EAZ8B,KAYtBC,EAZsB,KAcrCC,qBAAU,WACNC,QAAQC,IAAI,sBACb,CAACR,IAwDJ,OACI,6BACI,0BAAMS,aAAa,OACf,kBAACC,EAAA,EAAD,CAAWC,MAAOX,EAASY,OAAS,EAAkBC,GAAG,iBACrDC,SAAU,SAACC,GA1DR,IAACC,IA2DWD,EAAME,OAAOC,MAzDxCjB,EAAYe,IA0DGG,MAAM,WAAWC,QAAQ,aAC9BpB,EAASY,OAAS,EAAM,KACtB,8LAEJ,2BAAIZ,GACJ,kBAACU,EAAA,EAAD,CAAWC,MAAOT,EAAMU,OAAS,EAAkBC,GAAG,iBAClDC,SAAU,SAACC,GA7DP,IAACC,IA8DWD,EAAME,OAAOC,MA7DrC,uEAAuEG,KAAKL,GAI5Eb,EAASa,GAMTb,EAAS,KAoDEgB,MAAM,QAAQC,QAAQ,aAC1BlB,EAAMU,OAAS,EACd,yMADoB,KAGxB,2BAAIV,GACJ,kBAACQ,EAAA,EAAD,CAAWC,MAAOP,EAAOQ,OAAS,GAAmBC,GAAG,iBACpDC,SAAU,SAACC,GAtDD,IAACC,IAuDWD,EAAME,OAAOC,MAtD3C,cAAcG,KAAKL,GAInBX,EAAUW,GAMVX,EAAU,KA6CCc,MAAM,cAAcC,QAAQ,aAChChB,EAAOQ,OAAS,GACf,gNADsB,KAG1B,2BAAIR,IAER,kBAACkB,EAAA,EAAD,CAAQF,QAAQ,YAAYG,MAAM,UAAUC,WAnC5CtB,EAAMU,OAAS,GAAKZ,EAASY,OAAS,GAAuB,KAAlBR,EAAOQ,QAmCqBa,QAAS,YA/CtE,WACdlB,QAAQC,IAAI,cACZ,IAAIkB,EAAO,CACP1B,WACAE,QACAE,UAEJN,EAAM6B,QAAQD,GAwC8EE,KAAxF,W,UC9FSC,E,uKAOjB,OACE,yBAAKC,MAAO,CAAEC,UAAW,OAAQC,WAAY,SAC3C,kBAACnC,EAAD,CAAW8B,QANC,SAACX,GACfT,QAAQC,IAAIQ,W,GAJeiB,aCGbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLJ,QAAQI,MAAMA,EAAMwC,c","file":"static/js/main.d7b7d042.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, useEffect, useState } from 'react'\r\nimport { TextField, Button } from \"@material-ui/core\"\r\n\r\nexport default function Validator(props) {\r\n    // constructor(props) {\r\n    //     super(props)\r\n    //     this.state = {\r\n    //         password: \"\",\r\n    //         email: \"\",\r\n    //         number: \"\"\r\n    //     }\r\n    // }\r\n\r\n    const [passWord, setPassword] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [number, setNumber] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        console.log(\"useEffect Called\")\r\n    }, [passWord])\r\n\r\n    const handlePass = (txt) => {\r\n        // this.setState({ password: txt })\r\n        setPassword(txt)\r\n    }\r\n\r\n    const handleEmail = (txt) => {\r\n        if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(txt)) {\r\n            // this.setState({\r\n            //     email: txt\r\n            // })\r\n            setEmail(txt)\r\n        }\r\n        else {\r\n            // this.setState({\r\n            //     email: \"\"\r\n            // })\r\n            setEmail(\"\")\r\n        }\r\n    }\r\n\r\n    const handlePhoneNumber = (txt) => {\r\n        if (/^0(9)\\d{9}$/.test(txt)) {\r\n            // this.setState({\r\n            //     number: txt\r\n            // })\r\n            setNumber(txt)\r\n        }\r\n        else {\r\n            // this.setState({\r\n            //     number: \"\"\r\n            // })\r\n            setNumber(\"\")\r\n        }\r\n    }\r\n\r\n    const handleApi = () => {\r\n        console.log(\"api called\")\r\n        var text = {\r\n            passWord,\r\n            email,\r\n            number\r\n        }\r\n        props.getText(text)\r\n    }\r\n\r\n    const handleDisable = () => {\r\n        // console.log(\"disable called\")\r\n        if (email.length > 1 && passWord.length > 7 && number.length === 11) {\r\n            return false\r\n        }\r\n        else {\r\n            return true\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <form autoComplete=\"off\">\r\n                <TextField error={passWord.length < 8 ? true : false} id=\"outlined-basic\"\r\n                    onChange={(event) => {\r\n                        handlePass(event.target.value)\r\n                    }} label=\"password\" variant=\"outlined\" />\r\n                {(passWord.length > 7) ? (null) : (\r\n                    <p>!!حداقل طول رمز عبور 8 کاراکتر است</p>\r\n                )}\r\n                <p>{passWord}</p>\r\n                <TextField error={email.length < 1 ? true : false} id=\"outlined-basic\"\r\n                    onChange={(event) => {\r\n                        handleEmail(event.target.value)\r\n                    }} label=\"email\" variant=\"outlined\" />\r\n                {!(email.length < 1) ? (null) : (\r\n                    <p>!!لطفا فرمت درست ایمیل را وارد کنید</p>\r\n                )}\r\n                <p>{email}</p>\r\n                <TextField error={number.length < 11 ? true : false} id=\"outlined-basic\"\r\n                    onChange={(event) => {\r\n                        handlePhoneNumber(event.target.value)\r\n                    }} label=\"phonenumber\" variant=\"outlined\" />\r\n                {!(number.length < 11) ? (null) : (\r\n                    <p>!!لطفا شماره موبایل  خود را وارد کنید</p>\r\n                )}\r\n                <p>{number}</p>\r\n            </form>\r\n            <Button variant=\"contained\" color=\"primary\" disabled={handleDisable()} onClick={() => { handleApi() }}>\r\n                Submit\r\n            </Button>\r\n        </div >\r\n    )\r\n}\r\n","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\n// import Validator from './class/Validator';\nimport Validator from './hook/Validator';\nimport ValidatorHook from \"./react-hook-form/HookForm\"\n\n\n\nexport default class App extends Component {\n  render() {\n\n    const getText = (txt) => {\n      console.log(txt)\n    }\n\n    return (\n      <div style={{ marginTop: \"50px\", marginLeft: \"50px\" }}>\n        <Validator getText = {getText}/>\n        {/* <ValidatorHook /> */}\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}